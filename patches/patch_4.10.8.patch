diff -ruN linux-4.10/fs/exec.c linux-4.10-hardened/fs/exec.c
--- linux-4.10/fs/exec.c	2017-02-19 23:34:00.000000000 +0100
+++ linux-4.10-hardened/fs/exec.c	2017-04-05 18:23:47.000000000 +0200
@@ -225,6 +225,16 @@
 		 */
 		if (size <= ARG_MAX)
 			return page;
+		
+		// only allow 512KB for argv+env on suid/sgid binaries
+		// to prevent easy ASLR exhaustion
+		
+		if (((!uid_eq(bprm->cred->euid, current_euid())) ||
+		     (!gid_eq(bprm->cred->egid, current_egid()))) &&
+		    (size > (512 * 1024))) {
+			put_page(page);
+			return NULL;
+		}
 
 		/*
 		 * Limit to 1/4-th the stack size for the argv+env strings.
@@ -1748,6 +1758,13 @@
 	retval = prepare_binprm(bprm);
 	if (retval < 0)
 		goto out;
+	
+	/* 
+	 * limit suid stack to 8MB
+	 */
+	 
+	if (((!uid_eq(bprm->cred->euid, current_euid())) || (!gid_eq(bprm->cred->egid, current_egid()))))
+		current->signal->rlim[RLIMIT_STACK].rlim_cur = 8 * 1024 * 1024;
 
 	retval = copy_strings_kernel(1, &bprm->filename, bprm);
 	if (retval < 0)
diff -ruN linux-4.10/fs/proc/array.c linux-4.10-hardened/fs/proc/array.c
--- linux-4.10/fs/proc/array.c	2017-02-19 23:34:00.000000000 +0100
+++ linux-4.10-hardened/fs/proc/array.c	2017-04-05 18:28:41.000000000 +0200
@@ -477,6 +477,10 @@
 		task_cputime_adjusted(task, &utime, &stime);
 		gtime = task_gtime(task);
 	}
+	
+	wchan = 0;
+	eip = 0;
+	esp = 0;
 
 	/* scale priority and nice values from timeslices to -20..20 */
 	/* to make it look like a "normal" Unix priority/nice value  */
@@ -509,9 +513,9 @@
 	seq_put_decimal_ull(m, " ", vsize);
 	seq_put_decimal_ull(m, " ", mm ? get_mm_rss(mm) : 0);
 	seq_put_decimal_ull(m, " ", rsslim);
-	seq_put_decimal_ull(m, " ", mm ? (permitted ? mm->start_code : 1) : 0);
-	seq_put_decimal_ull(m, " ", mm ? (permitted ? mm->end_code : 1) : 0);
-	seq_put_decimal_ull(m, " ", (permitted && mm) ? mm->start_stack : 0);
+	seq_put_decimal_ull(m, " ", 1);
+	seq_put_decimal_ull(m, " ", 1);
+	seq_put_decimal_ull(m, " ", 0);
 	seq_put_decimal_ull(m, " ", esp);
 	seq_put_decimal_ull(m, " ", eip);
 	/* The signal information here is obsolete.
@@ -545,7 +549,7 @@
 	seq_put_decimal_ull(m, " ", cputime_to_clock_t(gtime));
 	seq_put_decimal_ll(m, " ", cputime_to_clock_t(cgtime));
 
-	if (mm && permitted) {
+	if (mm && false) {
 		seq_put_decimal_ull(m, " ", mm->start_data);
 		seq_put_decimal_ull(m, " ", mm->end_data);
 		seq_put_decimal_ull(m, " ", mm->start_brk);
diff -ruN linux-4.10/fs/proc/base.c linux-4.10-hardened/fs/proc/base.c
--- linux-4.10/fs/proc/base.c	2017-02-19 23:34:00.000000000 +0100
+++ linux-4.10-hardened/fs/proc/base.c	2017-04-05 18:30:01.000000000 +0200
@@ -638,7 +638,7 @@
 	return 0;
 }
 
-#ifdef CONFIG_HAVE_ARCH_TRACEHOOK
+#if 0
 static int proc_pid_syscall(struct seq_file *m, struct pid_namespace *ns,
 			    struct pid *pid, struct task_struct *task)
 {
@@ -2868,7 +2868,7 @@
 	REG("autogroup",  S_IRUGO|S_IWUSR, proc_pid_sched_autogroup_operations),
 #endif
 	REG("comm",      S_IRUGO|S_IWUSR, proc_pid_set_comm_operations),
-#ifdef CONFIG_HAVE_ARCH_TRACEHOOK
+#if 0
 	ONE("syscall",    S_IRUSR, proc_pid_syscall),
 #endif
 	REG("cmdline",    S_IRUGO, proc_pid_cmdline_ops),
@@ -3255,7 +3255,7 @@
 	NOD("comm",      S_IFREG|S_IRUGO|S_IWUSR,
 			 &proc_tid_comm_inode_operations,
 			 &proc_pid_set_comm_operations, {}),
-#ifdef CONFIG_HAVE_ARCH_TRACEHOOK
+#if 0
 	ONE("syscall",   S_IRUSR, proc_pid_syscall),
 #endif
 	REG("cmdline",   S_IRUGO, proc_pid_cmdline_ops),
diff -ruN linux-4.10/fs/proc/task_mmu.c linux-4.10-hardened/fs/proc/task_mmu.c
--- linux-4.10/fs/proc/task_mmu.c	2017-02-19 23:34:00.000000000 +0100
+++ linux-4.10-hardened/fs/proc/task_mmu.c	2017-04-05 19:08:10.000000000 +0200
@@ -297,13 +297,8 @@
 		pgoff = ((loff_t)vma->vm_pgoff) << PAGE_SHIFT;
 	}
 
-	/* We don't show the stack guard page in /proc/maps */
-	start = vma->vm_start;
-	if (stack_guard_page_start(vma, start))
-		start += PAGE_SIZE;
-	end = vma->vm_end;
-	if (stack_guard_page_end(vma, end))
-		end -= PAGE_SIZE;
+	start = 0UL;
+	end = 0UL;
 
 	seq_setwidth(m, 25 + sizeof(void *) * 6 - 1);
 	seq_printf(m, "%08lx-%08lx %c%c%c%c %08llx %02x:%02x %lu ",
@@ -313,7 +308,7 @@
 			flags & VM_WRITE ? 'w' : '-',
 			flags & VM_EXEC ? 'x' : '-',
 			flags & VM_MAYSHARE ? 's' : 'p',
-			pgoff,
+			0UL,
 			MAJOR(dev), MINOR(dev), ino);
 
 	/*
@@ -779,7 +774,7 @@
 		   "KernelPageSize: %8lu kB\n"
 		   "MMUPageSize:    %8lu kB\n"
 		   "Locked:         %8lu kB\n",
-		   (vma->vm_end - vma->vm_start) >> 10,
+		   0UL,
 		   mss.resident >> 10,
 		   (unsigned long)(mss.pss >> (10 + PSS_SHIFT)),
 		   mss.shared_clean  >> 10,
@@ -1654,7 +1649,7 @@
 		mpol_to_str(buffer, sizeof(buffer), proc_priv->task_mempolicy);
 	}
 
-	seq_printf(m, "%08lx %s", vma->vm_start, buffer);
+	seq_printf(m, "%08lx %s", 0UL, buffer);
 
 	if (file) {
 		seq_puts(m, " file=");
diff -ruN linux-4.10/mm/mmap.c linux-4.10-hardened/mm/mmap.c
--- linux-4.10/mm/mmap.c	2017-02-19 23:34:00.000000000 +0100
+++ linux-4.10-hardened/mm/mmap.c	2017-04-05 18:47:28.000000000 +0200
@@ -180,6 +180,7 @@
 
 SYSCALL_DEFINE1(brk, unsigned long, brk)
 {
+	unsigned long rlim;
 	unsigned long retval;
 	unsigned long newbrk, oldbrk;
 	struct mm_struct *mm = current->mm;
@@ -211,9 +212,16 @@
 	 * segment grow beyond its set limit the in case where the limit is
 	 * not page aligned -Ram Gupta
 	 */
-	if (check_data_rlimit(rlimit(RLIMIT_DATA), brk, mm->start_brk,
-			      mm->end_data, mm->start_data))
-		goto out;
+	 
+	rlim = rlimit(RLIMIT_DATA);
+
+	/* force a minimum 16MB brk heap on setuid/setgid binaries */
+	if (rlim < (4096 * PAGE_SIZE) && (get_dumpable(mm) != SUID_DUMP_USER))
+		rlim = 4096 * PAGE_SIZE;
+
+	if (check_data_rlimit(rlim, brk, mm->start_brk,
+ 			      mm->end_data, mm->start_data))
+ 		goto out;
 
 	newbrk = PAGE_ALIGN(brk);
 	oldbrk = PAGE_ALIGN(mm->brk);
